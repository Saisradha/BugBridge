generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Solution {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User (who created the solution)
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // Relation to Report (which report this solution belongs to)
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String     @id @default(cuid())
  name       String?
  email      String?    @unique
  reports    Report[]
  solutions  Solution[]
  accounts   Account[]
  sessions   Session[]
  createdAt  DateTime   @default(now())
}

model Report {
  id         String     @id @default(cuid())
  title      String
  content    String
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  solutions  Solution[]
  createdAt  DateTime   @default(now())
}

enum Role {
  REPORTER
  SOLVER
  BUSINESS
  ADMIN
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
